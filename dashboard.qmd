---
title: "Wingspan data"
author: "Noah Bolohan"
format: dashboard
---

```{r "imports"}
library(tidyverse)
library(gt)

invisible(
    lapply(
        list.files(
            "./R",
            full.names = TRUE
        ),
        source
    )
)
```

```{r "Download Google Sheet"}
wingspan_scores <- get_google_sheet(
  sheetId = 2096833443
)

wingspan_scores <- wingspan_scores |>
    mutate(
        game = 1:nrow(
            wingspan_scores
        ),
        .before = 1
    )
```

```{r "Stacked player score"}
stacked_player_scores_R <- lapply(
        1:7,
        iterative_pivot,
        df = wingspan_scores
    ) |> 
    bind_rows() |>
    drop_na() |>
    group_by(game) |>
    mutate(
        winner = case_when(
        score >= max(score, na.rm = TRUE) ~ TRUE,
        .default = FALSE
        )
    ) |>
    ungroup() |>
    arrange(
        game
    )

rows_stacked <- lapply(
    seq_len(
        nrow(stacked_player_scores_R)
    ),
    function(i) as.list(
        stacked_player_scores_R[i, ]
    )
)

rows_scores <- lapply(
    seq_len(
        nrow(wingspan_scores)
    ),
    function(i) as.list(
        wingspan_scores[i, ]
    )
)

ojs_define(data_stacked = rows_stacked)
ojs_define(data_scores = rows_scores)
```


Last updated: `{r} now(tzone="America/New_York")`

## {.toolbar}

```{ojs}
viewof name = Inputs.select(
    [
        "Alex",
        "Mila",
        "Joey",
        "Noah",
        "Rambouillet",
        "Meadow"
    ],
    {
        value: "Alex",
        label: "Name"
    }
)
```

```{ojs}
//| output: false

filtered_total = data_stacked.filter(function(df) {
  return df.Name == name && df.score_type == "total_score";
})

filtered_non_total = data_stacked.filter(function(df) {
  return df.Name == name && df.score_type != "total_score";
})

filtered_scores = data_scores.filter(function(df) {
  return df.player_1_name == name || df.player_2_name == name || df.player_3_name == name || df.player_4_name == name || df.player_5_name == name || df.player_6_name == name || df.player_7_name == name ;
})
```

```{ojs}
viewof n_games = Inputs.range(
    [
        1,
        filtered_scores.length
    ],
    {
        value: 50,
        step: 1,
        label: "Last N games"
    }
)
```

## Plot

```{ojs}
Plot.plot(
    {
        marks: [
            Plot.line(
                filtered_total.slice(-n_games).map((d,i) => [i,d.score])
            )
        ]
    }
)
```